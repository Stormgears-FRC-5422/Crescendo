# Settings specific to the Crescendo robot

##########
# Subsystem Toggles - turn on or off in specific robot files
##########
toggles.useDrive = (boolean) true
toggles.useShooter = (boolean) true
toggles.useIntake = (boolean) true
toggles.useNavX = (boolean) false
toggles.useStatusLights = (boolean) true
toggles.useVision = (boolean) true
toggles.useStormNet = (boolean) false
toggles.useController = (boolean) true
toggles.useAdvantageKit=(boolean) false
toggles.useAutoChooser = (boolean) false
toggles.useSecondXbox = (boolean) false
toggles.useAutoSelector = (boolean) false
toggles.useSysId = (boolean) false
toggles.useClimber = (boolean) true


##########
# Controls and buttons
#########
buttonBoard.driveJoystick =  (String) XboxController
#buttonBoard.driveJoystick = (String) LogitechController
#buttonBoard.driveJoystick = (String) dummy
buttonBoard.joystick2 = (String) XboxController

buttonBoard.defaultAlliance = (String) blue
buttonBoard.initPoseX = (number) 1.3
buttonBoard.initPoseY = (number) 5.5
buttonBoard.initPoseDegrees = (number) 0.0

######s####
# Choreo
##########
#choreo.path = (String) straight_2m
#choreo.path = (String) amp_side.1
choreo.path = (String) simple_2m
#choreo.path = (String) straight_back
#choreo.path = (String) straight_4m
#choreo.path = (String) rotation_180
#choreo.path = (String) back_2m
#choreo.path = (String) both_2m
#choreo.path = (String) four_note_w_amp
#choreo.path = (String) 3_note_speaker
#choreo.path = (String) 3_note_speaker_v2
#choreo.path = (String) 3_note_speaker_v3
#choreo.path = (String) testAuto
#choreo.path = (String) farside



##########
# YAGSL swerve constants
##########
swerve.configDirectory = (String) swerve
# swerve.verbosity = high | low | machine | none
swerve.verbosity = (String) none

# This is for the swerveModule SimpleMotorFeedForward, which gets used as the arbitrary feed forward in the sparkMax
# set to -ve number to use defaults (since negative doesn't make sense).
swerve.useArbitraryFF = (boolean) true
swerve.arbFFKs = (number) 0.075
swerve.arbFFKv = (number) 2.6
swerve.arbFFKa = (number) 0.25


# These are path following PID constants, not swerve module PID contants!
swerve.openLoopAuto = (boolean) false
swerve.useCosineCompensation = (boolean) false
swerve.useVoltageCompensation = (boolean) true
swerve.compensatedVoltage = (number) 12.0

#
#   "p": 0.016996,
# OLD JSON P VALUE
#     "p": 0.00206645,

# controller constants - apply for any swerve
swerve.xPidKp = (number) 9
swerve.xPidKi = (number) 0.0
swerve.xPidKd = (number) 0.0

swerve.yPidKp = (number) 0.0
swerve.yPidKi = (number) 0.0
swerve.yPidKd = (number) 0.00

swerve.rotPidKp = (number) 0
swerve.rotPidKi = (number) 0.0
swerve.rotPidKd = (number) 0.0
##########

##########
# Physical constants
##########

# bumpers are approx. 3 inches thick
bumperThickness = (number) 0.09

# 32"W x 28"L
robotWidth = (number) 0.820
robotLength = (number) 0.711

# **********
# Drive
# **********
#
drive.drivetrainTrackwidthMeters = (number) 0.680
drive.drivetrainWheelbaseMeters = (number) 0.578
drive.wheelDiameter = (number) 0.10033
drive.driveReduction = (number) 0.148235
drive.steerReduction = (number) 0.078125
drive.driveSpeedScale = (number) 0.8
drive.precisionSpeedScale = (number) 0.2
drive.driveType = (String) YagslDrive
#drive.driveType = (String) SwerveDiagnosticDrive
#drive.driveType = (String) SwerveDrive

##########
# all the CAN IDs - these need to match settings in Swerve .json files
##########
drive.frontLeftEncoderID = (int) 1
drive.frontLeftDriveID = (int) 11
drive.frontLeftSteerID = (int) 10

drive.frontRightEncoderID = (int) 2
drive.frontRightDriveID = (int) 21
drive.frontRightSteerID = (int) 20

drive.backRightEncoderID = (int) 3
drive.backRightDriveID = (int) 31
drive.backRightSteerID = (int) 30

drive.backLeftEncoderID = (int) 4
drive.backLeftDriveID = (int) 41
drive.backLeftSteerID = (int) 40

# offsets
drive.SteerEncoderTicksPerRotation=(int) 4096
drive.frontLeftOffsetDegrees=(number) 5.27328
drive.frontRightOffsetDegrees=(number) 324.756
drive.backLeftOffsetDegrees=(number) 17.15292
drive.backRightOffsetDegrees=(number) 346.1134

# **********
# NavX
# **********
navXConnection=(String) SPI
navX.navXOffsetDegrees = (number) 0

# **********
# Shooter
# **********
shooter.leaderID = (int) 1
shooter.followerID = (int) 2
shooter.intakeID = (int) 3
shooter.shootMotorSpeed = (number) 1
shooter.intakeMotorSpeed = (number) 1
shooter.ampShootMotorSpeed = (number) 0.25
shooter.ampIntakeMotorSpeed = (number) 0.25
shooter.intakeUpperMotorSpeed = (number) 0.0
shooter.intakeLowerMotorSpeed = (number) 1.0
shooter.diagnosticShooterSpeed = (number) 1
shooter.diagnosticIntakeSpeed = (number) 1
shooter.outtakeSpeed = (number) 0.5
shooter.shootForIterations = (int) 50

# **********
# Lights
# **********
lights.oneRingLength = (int) 12
lights.ringLEDType = (String) RGB
lights.port = (int) 1
lights.forwardLEDIndex = (int) 5
lights.backLEDOffset1 = (int) 5
lights.backLEDOffset2 = (int) 7
lights.invertRingRotation = (boolean) false
lights.compassUpdateInterval = (int) 12
lights.brightness = (number) 0.8

#**********
#Climber
#**********
# All speeds given in percent output
Climber.leaderID = (int) 4
Climber.followerID = (int) 5
Climber.invertLeader = (boolean) false

Climber.ticksPerRotation=(number) 42
Climber.gearRatio=(number) 100

Climber.climbCurrentLimit = (int) 40
Climber.preHomeCurrentLimit = (int) 1
Climber.normalCurrentLimit = (int) 20
Climber.stallCurrentLimit = (number) 0.5
Climber.climbSpeed = (number) 0.75
Climber.homeSpeed = (number) 0.05
Climber.descendSpeed = (number) 0.1
Climber.fwdPosSpeed = (number) 0.35
Climber.revPosSpeed = (number) 0.35

Climber.useCurrentLimitHomeStrategy = (boolean) false

Climber.autoHome = (boolean) true
Climber.homeSwitchDegrees = (number) -15.8
Climber.homeHardLimitDegrees = (number) -87
Climber.ampShootDegrees = (number) 124
Climber.stowDegrees = (number) -30
Climber.climbStartDegrees = (number) 90
Climber.climbStopInDegrees = (number) -80
Climber.forwardDeltaDegrees = (number) 30
Climber.initDegrees = (number) -30
Climber.initToleranceDegrees = (number) 10

Climber.usePidToAimArm = (boolean) true
Climber.pidTrapezoidRampDegrees = (number) 10
Climber.pidThresholdDegrees = (number) 0.5
# Note that arbMaxFF get *added to* the max pid output.
Climber.arbMaxFF = (number) 0.4
Climber.arbMinFF = (number) 0
Climber.pidMaxKout = (number) 0.5
Climber.pidKp = (number) 1.0
Climber.pidKf = (number) 0
Climber.pidKd = (number) 0
Climber.pidKi = (number) 0
Climber.pidiZone = (number) 0
vision.noteLimelight=(String)limelight-note
vision.limelight=(String)limelight
