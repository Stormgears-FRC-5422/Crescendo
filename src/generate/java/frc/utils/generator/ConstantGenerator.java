package frc.utils.generator;

import java.io.FileReader;
import java.io.FileWriter;
import java.util.*;

import static java.lang.System.exit;
public class ConstantGenerator {
    static Map<String, Map<String, PropItem>> allConstants = new HashMap<>();
    static Map<String, String> properties = new HashMap<>();
    public static StringBuilder program = new StringBuilder();
    public static String programHeader =
            "/* This file was autogenerated at {" +
            java.time.LocalTime.now().format(java.time.format.DateTimeFormatter.ofPattern("HH:mm:ss")) +
            "} - do not edit it - any edits will be overwritten! */ \n" +
            "package frc.robot;\n" +
            "\nimport frc.utils.configfile.StormProp;\n";

    private static String quote(String s) {
        return "\"" + s + "\"";
    }

    private static String indent(String s, int n) {
        return "\t".repeat(Math.max(0, n)) + s + "\n";
    }

    public static void programWriter() {
        int tabs = 0;
        program.append(programHeader);
        program.append("\npublic final class Constants {\n");
        tabs += 1;
        for (Map.Entry<String, Map<String, PropItem>> entry : allConstants.entrySet()) {
            if (!entry.getKey().equals("general")) {
                program.append("\n");
                program.append(indent("public static final class " +
                        entry.getKey().substring(0, 1).toUpperCase() +
                        entry.getKey().substring(1)
                        + " {", tabs));
                tabs += 1;
                for (Map.Entry<String, PropItem> entry2 : entry.getValue().entrySet()) {
                    program.append(indent(entry2.getValue().toString(), tabs));
                }
                tabs -= 1;
                program.append(indent("}", tabs));
            } else {
                for (Map.Entry<String, PropItem> entry2 : entry.getValue().entrySet()) {
                    program.append(indent(entry2.getValue().toString(), tabs));
                }
            }
        }
        tabs -= 1;
        program.append(indent("}\n", tabs));
    }

    public static void init(String path) throws Exception {
        // where are closing this file
        Object defaultVal;
        FileReader reader = new FileReader(path + "/config.properties");
        Properties p = new Properties();
        p.load(reader);
        List<String> propFiles = new ArrayList<>();
        String prefix;
        String type = "";

        Enumeration<Object> keys = p.keys();
        while (keys.hasMoreElements()) {
            Object key = keys.nextElement();
            if (key.toString().contains("robot.")) {
                propFiles.add(p.get(key).toString());
            }
            if (!key.toString().contains("robot.")) {
                properties.put(key.toString(), p.get(key).toString());
            }
        }

        for (String prop : propFiles) {
            reader = new FileReader(path + "/" + prop);
            p = new Properties();
            p.load(reader);
            keys = p.keys();
            while (keys.hasMoreElements()) {
                Object key = keys.nextElement();
                properties.put(key.toString(), p.get(key).toString());
            }
        }

        for (Map.Entry<String, String> entry : properties.entrySet()) {
            try {
                type = "";
                if (entry.getValue().contains("(")) {
                    type = entry.getValue().substring(entry.getValue().indexOf("(") + 1, entry.getValue().indexOf(")"));
                }
                if (entry.getKey().contains(".")) {
                    prefix = entry.getKey().substring(0, entry.getKey().indexOf("."));
                } else {
                    prefix = "general";
                }
                defaultVal = switch (type.toLowerCase()) {
                    case "int" -> 0;
                    case "number" -> 0.0;
                    case "boolean" -> false;
                    default -> "";
                };

                if (allConstants.containsKey(prefix)) {
                    if (allConstants.get(prefix).containsKey(entry.getKey())) {
                        if (!allConstants.get(prefix).get(entry.getKey()
                                        .replace(prefix + ".", ""))
                                .equals(new PropItem(quote(type), entry.getKey().replace(prefix + ".", ""),
                                        defaultVal.toString()))) {
                            throw new Exception("Build Failed: Error in Generating Constants - mismatched types!");
                        }
                    } else {
                        allConstants.get(prefix).put(entry.getKey().replace(prefix + ".", ""),
                                new PropItem(type, entry.getKey().replace(prefix + ".", ""),
                                defaultVal.toString()));
                    }
                } else {
                    allConstants.put(prefix, new HashMap<String, PropItem>());
                    allConstants.get(prefix).put(entry.getKey().replace(prefix + ".", ""),
                            new PropItem(type, entry.getKey().replace(prefix + ".", ""),
                            defaultVal.toString()));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.err.println("usage: program INPUTFILEDIR OUTPUTFILENAME");
            exit(1);
        }

        String inputFileDir = args[0];
        String outputFileName = args[1];

        init(inputFileDir);
        programWriter();

        try {
            // Creates a Writer using FileWriter
            FileWriter output = new FileWriter(outputFileName);

            // Writes the program to file
            output.write(program.toString());
            System.out.println("Data is written to the file.");

            // Closes the writer
            output.close();
        } catch (Exception e) {
            e.getStackTrace();
        }

        for (Map.Entry<String, Map<String, PropItem>> entry : allConstants.entrySet()) {
            System.out.println(entry);
        }
    }

}
